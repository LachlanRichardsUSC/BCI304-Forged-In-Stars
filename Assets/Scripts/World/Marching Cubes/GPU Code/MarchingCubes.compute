// A compute shader that implements the marching cubes algorithm for generating terrain mesh.
// This shader processes 3D density field data to create a set of triangles based on cube configurations.
// It uses vertex interpolation, normal calculation, and vertex welding to ensure smooth and seamless terrain.

#pragma kernel ProcessCube
#include "MarchTables.compute"

// Vertex structure matches the C# VertexData struct
struct Vertex
{
    float3 position;
    float3 normal;
    int2 id;
};

struct Triangle
{
    Vertex vertexC;
    Vertex vertexB;
    Vertex vertexA;
};

// Buffers and textures
AppendStructuredBuffer<Triangle> triangles;
RWTexture3D<float> DensityTexture;

// Parameters
int textureSize;
int numPointsPerAxis;
float boundsSize;
float isoLevel;
float3 chunkCoord;

// Convert grid coordinates to world position
float3 coordToWorld(int3 coord)
{
    return (coord / (textureSize - 1.0f) - 0.5f) * boundsSize;
}

// Get point index in the chunk
int indexFromCoord(int3 coord)
{
    coord = coord - int3(chunkCoord);
    return coord.z * numPointsPerAxis * numPointsPerAxis + coord.y * numPointsPerAxis + coord.x;
}

// Sample density value safely
float sampleDensity(int3 coord)
{
    coord = max(0, min(coord, textureSize - 1));
    return DensityTexture[coord];
}

// Calculate normal using central differences
float3 calculateNormal(int3 coord)
{
    float dx = sampleDensity(coord + int3(1, 0, 0)) - sampleDensity(coord - int3(1, 0, 0));
    float dy = sampleDensity(coord + int3(0, 1, 0)) - sampleDensity(coord - int3(0, 1, 0));
    float dz = sampleDensity(coord + int3(0, 0, 1)) - sampleDensity(coord - int3(0, 0, 1));
    return normalize(-float3(dx, dy, dz));
}

// Create a vertex along an edge
Vertex createVertex(int3 coordA, int3 coordB, float densityA, float densityB)
{
    // Get positions and density values
    float3 posA = coordToWorld(coordA);
    float3 posB = coordToWorld(coordB);
    
    // Interpolate position based on density values
    float t = (isoLevel - densityA) / (densityB - densityA);
    t = saturate(t); // Add this to prevent extrapolation
    float3 position = posA + t * (posB - posA);

    // Calculate normal at the interpolated coordinate
    int3 nearestCoord = int3(round(lerp(float3(coordA), float3(coordB), t)));
    float3 normal = calculateNormal(nearestCoord); // USE YOUR SIMPLE FUNCTION!

    // Create vertex ID for welding
    int indexA = indexFromCoord(coordA);
    int indexB = indexFromCoord(coordB);

    // Create and return vertex
    Vertex vertex;
    vertex.position = position;
    vertex.normal = normal;
    vertex.id = int2(min(indexA, indexB), max(indexA, indexB));
    return vertex;
}

[numthreads(8, 8, 8)]
void ProcessCube(int3 id : SV_DispatchThreadID)
{
    // Check if within chunk bounds
    int numCubesPerAxis = numPointsPerAxis - 1;
    if (id.x >= numCubesPerAxis || id.y >= numCubesPerAxis || id.z >= numCubesPerAxis)
    {
        return;
    }

    // Get coordinates in the density field
    int3 coord = id + int3(chunkCoord);

    // Get the eight corners of the cube FIRST
    int3 cornerCoords[8];
    cornerCoords[0] = coord + int3(0, 0, 0);
    cornerCoords[1] = coord + int3(1, 0, 0);
    cornerCoords[2] = coord + int3(1, 0, 1);
    cornerCoords[3] = coord + int3(0, 0, 1);
    cornerCoords[4] = coord + int3(0, 1, 0);
    cornerCoords[5] = coord + int3(1, 1, 0);
    cornerCoords[6] = coord + int3(1, 1, 1);
    cornerCoords[7] = coord + int3(0, 1, 1);

    // THEN cache the densities
    float cornerDensities[8];
    for (int i = 0; i < 8; i++)
    {
        cornerDensities[i] = sampleDensity(cornerCoords[i]);
    }

    // Calculate cube configuration index using cached values
    int cubeConfiguration = 0;
    for (int cornerIndex = 0; cornerIndex < 8; cornerIndex++)
    {
        if (cornerDensities[cornerIndex] < isoLevel)
        {
            cubeConfiguration |= (1 << cornerIndex);
        }
    }

    // Get triangulation for this cube configuration
    int edgeIndices[16] = triangulation[cubeConfiguration];

    // Create triangles for the current cube
    for (int triIndex = 0; triIndex < 16; triIndex += 3)
    {
        if (edgeIndices[triIndex] == -1)
        {
            break;
        }

        // Get indices for the three edges that form a triangle
        int edgeIndexA = edgeIndices[triIndex];
        int a0 = cornerIndexAFromEdge[edgeIndexA];
        int a1 = cornerIndexBFromEdge[edgeIndexA];

        int edgeIndexB = edgeIndices[triIndex + 1];
        int b0 = cornerIndexAFromEdge[edgeIndexB];
        int b1 = cornerIndexBFromEdge[edgeIndexB];

        int edgeIndexC = edgeIndices[triIndex + 2];
        int c0 = cornerIndexAFromEdge[edgeIndexC];
        int c1 = cornerIndexBFromEdge[edgeIndexC];

        // Create the three vertices
        Vertex vertexA = createVertex(cornerCoords[a0], cornerCoords[a1], cornerDensities[a0], cornerDensities[a1]);
        Vertex vertexB = createVertex(cornerCoords[b0], cornerCoords[b1], cornerDensities[b0], cornerDensities[b1]);
        Vertex vertexC = createVertex(cornerCoords[c0], cornerCoords[c1], cornerDensities[c0], cornerDensities[c1]);

        // Create and append triangle
        Triangle tri;
        tri.vertexA = vertexA;
        tri.vertexB = vertexB;
        tri.vertexC = vertexC;
        triangles.Append(tri);
    }
}